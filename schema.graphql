type Pool @entity {
  id: ID!
  loans: [Loan!]! # TODO: maybe transform into a reverse lookup? https://thegraph.com/docs/define-a-subgraph#writing-mappings
  totalDebt: BigInt!
  totalBorrowsCount: Int!
  totalBorrowsAggregatedAmount: BigInt!
  totalRepaysCount: Int!
  totalRepaysAggregatedAmount: BigInt!
  weightedInterestRate: BigInt!
  seniorDebt: BigInt!
  seniorInterestRate: BigInt!
  minJuniorRatio: BigInt!
  maxJuniorRatio: BigInt!
  currentJuniorRatio: BigInt!
  maxReserve: BigInt!
  seniorTokenPrice: BigInt! # assessor
  juniorTokenPrice: BigInt! # assessor
  # seniorTokenAddress: string todo
  # juniorTokenAddress: string todo
  reserve: BigInt!
  assetValue: BigInt!
  shortName: String!
  version: BigInt!
}

type RewardDailyInvestorTokenBalance @entity {
  id: ID! # investorAddress+poolId+day
  account: Account!
  day: Day!
  pool: Pool!
  seniorTokenAmount: BigInt!
  seniorTokenValue: BigInt!
  juniorTokenAmount: BigInt!
  juniorTokenValue: BigInt!
  nonZeroBalanceSince: BigInt! # investments have to be at least 60 days long for balances to accrue
}

type DailyPoolData @entity {
  id: ID! # poolId+day
  day: Day!
  pool: Pool!
  reserve: BigInt! # reserve.sol totalBalance()
  totalDebt: BigInt! # outstanding Volume (but also is already in the pool)
  assetValue: BigInt! # navfeed.sol currentNav()
  seniorDebt: BigInt!  
  seniorTokenPrice: BigInt! # assessor
  juniorTokenPrice: BigInt! # assessor
  currentJuniorRatio: BigInt!
}

type Loan @entity {
  id: ID!
  pool: Pool!
  index: Int!
  nftId: String
  nftRegistry: Bytes!
  owner: Bytes!
  opened: Int!
  closed: Int
  debt: BigInt!
  interestRatePerSecond: BigInt
  ceiling: BigInt
  threshold: BigInt
  borrowsCount: Int!
  borrowsAggregatedAmount: BigInt!
  repaysCount: Int!
  repaysAggregatedAmount: BigInt!
}

type Proxy @entity {
  id: ID!
  owner: Bytes!
}

type Account @entity {
  id: ID! # address
  tokenBalances: [TokenBalance!] @derivedFrom (field: "owner")
  dailyTokenBalances: [RewardDailyInvestorTokenBalance!] @derivedFrom (field: "account")
  currentActiveInvestmentAmount: BigInt # not based on token balance
}

type ERC20Transfer @entity {
  id: ID!
  transaction: String! # txhash
  token: Token!
  from: String!
  to: String!
  amount: BigInt!
  pool: Pool!
}

type Token @entity {
  id: ID! # token address
  owners: [Account!]!
  tokenBalances: [TokenBalance!]! @derivedFrom(field: "token")
}

type TokenBalance @entity {
  id: ID! # account address + token address 
  owner: Account!
  balance: BigInt!
  value: BigInt!
  token: Token!
}

type Day @entity {
  id: ID!
  reserve: BigInt # sum for all pools active on this day
  totalDebt: BigInt # sum for all pools active on this day
  assetValue: BigInt # sum for all pools active on this day
  seniorDebt: BigInt # sum for all pools active on this day
  dailyPoolData: [DailyPoolData!] @derivedFrom(field: "day")
}
