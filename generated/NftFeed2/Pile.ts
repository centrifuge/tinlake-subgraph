// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class LogNote extends EthereumEvent {
  get params(): LogNote__Params {
    return new LogNote__Params(this);
  }
}

export class LogNote__Params {
  _event: LogNote;

  constructor(event: LogNote) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get guy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get foo(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get bar(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get wad(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fax(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Pile__compoundingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pile__ratesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Pile extends SmartContract {
  static bind(address: Address): Pile {
    return new Pile("Pile", address);
  }

  chargeInterest(
    interestBearingAmount: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt
  ): BigInt {
    let result = super.call("chargeInterest", [
      EthereumValue.fromUnsignedBigInt(interestBearingAmount),
      EthereumValue.fromUnsignedBigInt(ratePerSecond),
      EthereumValue.fromUnsignedBigInt(lastUpdated)
    ]);

    return result[0].toBigInt();
  }

  try_chargeInterest(
    interestBearingAmount: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("chargeInterest", [
      EthereumValue.fromUnsignedBigInt(interestBearingAmount),
      EthereumValue.fromUnsignedBigInt(ratePerSecond),
      EthereumValue.fromUnsignedBigInt(lastUpdated)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  compounding(
    chi: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt,
    pie: BigInt
  ): Pile__compoundingResult {
    let result = super.call("compounding", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(ratePerSecond),
      EthereumValue.fromUnsignedBigInt(lastUpdated),
      EthereumValue.fromUnsignedBigInt(pie)
    ]);

    return new Pile__compoundingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_compounding(
    chi: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt,
    pie: BigInt
  ): CallResult<Pile__compoundingResult> {
    let result = super.tryCall("compounding", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(ratePerSecond),
      EthereumValue.fromUnsignedBigInt(lastUpdated),
      EthereumValue.fromUnsignedBigInt(pie)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pile__compoundingResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  debt(loan: BigInt): BigInt {
    let result = super.call("debt", [EthereumValue.fromUnsignedBigInt(loan)]);

    return result[0].toBigInt();
  }

  try_debt(loan: BigInt): CallResult<BigInt> {
    let result = super.tryCall("debt", [
      EthereumValue.fromUnsignedBigInt(loan)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  loanRates(param0: BigInt): BigInt {
    let result = super.call("loanRates", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_loanRates(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("loanRates", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  pie(param0: BigInt): BigInt {
    let result = super.call("pie", [EthereumValue.fromUnsignedBigInt(param0)]);

    return result[0].toBigInt();
  }

  try_pie(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("pie", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rateDebt(rate: BigInt): BigInt {
    let result = super.call("rateDebt", [
      EthereumValue.fromUnsignedBigInt(rate)
    ]);

    return result[0].toBigInt();
  }

  try_rateDebt(rate: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rateDebt", [
      EthereumValue.fromUnsignedBigInt(rate)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rates(param0: BigInt): Pile__ratesResult {
    let result = super.call("rates", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new Pile__ratesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_rates(param0: BigInt): CallResult<Pile__ratesResult> {
    let result = super.tryCall("rates", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Pile__ratesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  rdiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rdiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_rdiv(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rdiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rmul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rmul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_rmul(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rmul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rpow(x: BigInt, n: BigInt, base: BigInt): BigInt {
    let result = super.call("rpow", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(n),
      EthereumValue.fromUnsignedBigInt(base)
    ]);

    return result[0].toBigInt();
  }

  try_rpow(x: BigInt, n: BigInt, base: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rpow", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(n),
      EthereumValue.fromUnsignedBigInt(base)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeAdd(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeAdd", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeAdd(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeAdd", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeDiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeDiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeDiv(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeDiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeMul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeMul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeMul(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeMul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeSub(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeSub", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeSub(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeSub", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  toAmount(chi: BigInt, pie: BigInt): BigInt {
    let result = super.call("toAmount", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(pie)
    ]);

    return result[0].toBigInt();
  }

  try_toAmount(chi: BigInt, pie: BigInt): CallResult<BigInt> {
    let result = super.tryCall("toAmount", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(pie)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  toPie(chi: BigInt, amount: BigInt): BigInt {
    let result = super.call("toPie", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_toPie(chi: BigInt, amount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("toPie", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  total(): BigInt {
    let result = super.call("total", []);

    return result[0].toBigInt();
  }

  try_total(): CallResult<BigInt> {
    let result = super.tryCall("total", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("wards", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AccrueCall extends EthereumCall {
  get inputs(): AccrueCall__Inputs {
    return new AccrueCall__Inputs(this);
  }

  get outputs(): AccrueCall__Outputs {
    return new AccrueCall__Outputs(this);
  }
}

export class AccrueCall__Inputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AccrueCall__Outputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class ChangeRateCall extends EthereumCall {
  get inputs(): ChangeRateCall__Inputs {
    return new ChangeRateCall__Inputs(this);
  }

  get outputs(): ChangeRateCall__Outputs {
    return new ChangeRateCall__Outputs(this);
  }
}

export class ChangeRateCall__Inputs {
  _call: ChangeRateCall;

  constructor(call: ChangeRateCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeRateCall__Outputs {
  _call: ChangeRateCall;

  constructor(call: ChangeRateCall) {
    this._call = call;
  }
}

export class DecDebtCall extends EthereumCall {
  get inputs(): DecDebtCall__Inputs {
    return new DecDebtCall__Inputs(this);
  }

  get outputs(): DecDebtCall__Outputs {
    return new DecDebtCall__Outputs(this);
  }
}

export class DecDebtCall__Inputs {
  _call: DecDebtCall;

  constructor(call: DecDebtCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecDebtCall__Outputs {
  _call: DecDebtCall;

  constructor(call: DecDebtCall) {
    this._call = call;
  }
}

export class DenyCall extends EthereumCall {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DripCall extends EthereumCall {
  get inputs(): DripCall__Inputs {
    return new DripCall__Inputs(this);
  }

  get outputs(): DripCall__Outputs {
    return new DripCall__Outputs(this);
  }
}

export class DripCall__Inputs {
  _call: DripCall;

  constructor(call: DripCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DripCall__Outputs {
  _call: DripCall;

  constructor(call: DripCall) {
    this._call = call;
  }
}

export class FileCall extends EthereumCall {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ratePerSecond(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class IncDebtCall extends EthereumCall {
  get inputs(): IncDebtCall__Inputs {
    return new IncDebtCall__Inputs(this);
  }

  get outputs(): IncDebtCall__Outputs {
    return new IncDebtCall__Outputs(this);
  }
}

export class IncDebtCall__Inputs {
  _call: IncDebtCall;

  constructor(call: IncDebtCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncDebtCall__Outputs {
  _call: IncDebtCall;

  constructor(call: IncDebtCall) {
    this._call = call;
  }
}

export class RelyCall extends EthereumCall {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class SetRateCall extends EthereumCall {
  get inputs(): SetRateCall__Inputs {
    return new SetRateCall__Inputs(this);
  }

  get outputs(): SetRateCall__Outputs {
    return new SetRateCall__Outputs(this);
  }
}

export class SetRateCall__Inputs {
  _call: SetRateCall;

  constructor(call: SetRateCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRateCall__Outputs {
  _call: SetRateCall;

  constructor(call: SetRateCall) {
    this._call = call;
  }
}
