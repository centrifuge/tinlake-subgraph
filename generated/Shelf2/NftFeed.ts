// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class LogNote extends EthereumEvent {
  get params(): LogNote__Params {
    return new LogNote__Params(this);
  }
}

export class LogNote__Params {
  _event: LogNote;

  constructor(event: LogNote) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get guy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get foo(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get bar(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get wad(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fax(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class NftFeed extends SmartContract {
  static bind(address: Address): NftFeed {
    return new NftFeed("NftFeed", address);
  }

  borrowed(param0: BigInt): BigInt {
    let result = super.call("borrowed", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_borrowed(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("borrowed", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  ceiling(loan: BigInt): BigInt {
    let result = super.call("ceiling", [
      EthereumValue.fromUnsignedBigInt(loan)
    ]);

    return result[0].toBigInt();
  }

  try_ceiling(loan: BigInt): CallResult<BigInt> {
    let result = super.tryCall("ceiling", [
      EthereumValue.fromUnsignedBigInt(loan)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  ceilingRatio(param0: BigInt): BigInt {
    let result = super.call("ceilingRatio", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ceilingRatio(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("ceilingRatio", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  initialCeiling(loan: BigInt): BigInt {
    let result = super.call("initialCeiling", [
      EthereumValue.fromUnsignedBigInt(loan)
    ]);

    return result[0].toBigInt();
  }

  try_initialCeiling(loan: BigInt): CallResult<BigInt> {
    let result = super.tryCall("initialCeiling", [
      EthereumValue.fromUnsignedBigInt(loan)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  nftID(loan: BigInt): Bytes {
    let result = super.call("nftID", [EthereumValue.fromUnsignedBigInt(loan)]);

    return result[0].toBytes();
  }

  try_nftID(loan: BigInt): CallResult<Bytes> {
    let result = super.tryCall("nftID", [
      EthereumValue.fromUnsignedBigInt(loan)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  nftID1(registry: Address, tokenId: BigInt): Bytes {
    let result = super.call("nftID", [
      EthereumValue.fromAddress(registry),
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBytes();
  }

  try_nftID1(registry: Address, tokenId: BigInt): CallResult<Bytes> {
    let result = super.tryCall("nftID", [
      EthereumValue.fromAddress(registry),
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  nftValues(param0: Bytes): BigInt {
    let result = super.call("nftValues", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nftValues(param0: Bytes): CallResult<BigInt> {
    let result = super.tryCall("nftValues", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rdiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rdiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_rdiv(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rdiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  risk(param0: Bytes): BigInt {
    let result = super.call("risk", [EthereumValue.fromFixedBytes(param0)]);

    return result[0].toBigInt();
  }

  try_risk(param0: Bytes): CallResult<BigInt> {
    let result = super.tryCall("risk", [EthereumValue.fromFixedBytes(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rmul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rmul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_rmul(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rmul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeAdd(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeAdd", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeAdd(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeAdd", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeDiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeDiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeDiv(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeDiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeMul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeMul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeMul(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeMul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeSub(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeSub", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeSub(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeSub", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  threshold(loan: BigInt): BigInt {
    let result = super.call("threshold", [
      EthereumValue.fromUnsignedBigInt(loan)
    ]);

    return result[0].toBigInt();
  }

  try_threshold(loan: BigInt): CallResult<BigInt> {
    let result = super.tryCall("threshold", [
      EthereumValue.fromUnsignedBigInt(loan)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  thresholdRatio(param0: BigInt): BigInt {
    let result = super.call("thresholdRatio", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_thresholdRatio(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("thresholdRatio", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("wards", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BorrowCall extends EthereumCall {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class BorrowEventCall extends EthereumCall {
  get inputs(): BorrowEventCall__Inputs {
    return new BorrowEventCall__Inputs(this);
  }

  get outputs(): BorrowEventCall__Outputs {
    return new BorrowEventCall__Outputs(this);
  }
}

export class BorrowEventCall__Inputs {
  _call: BorrowEventCall;

  constructor(call: BorrowEventCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowEventCall__Outputs {
  _call: BorrowEventCall;

  constructor(call: BorrowEventCall) {
    this._call = call;
  }
}

export class DenyCall extends EthereumCall {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DependCall extends EthereumCall {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class RelyCall extends EthereumCall {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RepayCall extends EthereumCall {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class UnlockEventCall extends EthereumCall {
  get inputs(): UnlockEventCall__Inputs {
    return new UnlockEventCall__Inputs(this);
  }

  get outputs(): UnlockEventCall__Outputs {
    return new UnlockEventCall__Outputs(this);
  }
}

export class UnlockEventCall__Inputs {
  _call: UnlockEventCall;

  constructor(call: UnlockEventCall) {
    this._call = call;
  }

  get loan(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockEventCall__Outputs {
  _call: UnlockEventCall;

  constructor(call: UnlockEventCall) {
    this._call = call;
  }
}

export class UpdateCall extends EthereumCall {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get nftID_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get risk_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class Update1Call extends EthereumCall {
  get inputs(): Update1Call__Inputs {
    return new Update1Call__Inputs(this);
  }

  get outputs(): Update1Call__Outputs {
    return new Update1Call__Outputs(this);
  }
}

export class Update1Call__Inputs {
  _call: Update1Call;

  constructor(call: Update1Call) {
    this._call = call;
  }

  get nftID_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Update1Call__Outputs {
  _call: Update1Call;

  constructor(call: Update1Call) {
    this._call = call;
  }
}
