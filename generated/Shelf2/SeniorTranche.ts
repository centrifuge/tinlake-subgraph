// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class LogNote extends EthereumEvent {
  get params(): LogNote__Params {
    return new LogNote__Params(this);
  }
}

export class LogNote__Params {
  _event: LogNote;

  constructor(event: LogNote) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get guy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get foo(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get bar(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get wad(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fax(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class SeniorTranche__compoundingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SeniorTranche extends SmartContract {
  static bind(address: Address): SeniorTranche {
    return new SeniorTranche("SeniorTranche", address);
  }

  assessor(): Address {
    let result = super.call("assessor", []);

    return result[0].toAddress();
  }

  try_assessor(): CallResult<Address> {
    let result = super.tryCall("assessor", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  balance(): BigInt {
    let result = super.call("balance", []);

    return result[0].toBigInt();
  }

  try_balance(): CallResult<BigInt> {
    let result = super.tryCall("balance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  borrowed(): BigInt {
    let result = super.call("borrowed", []);

    return result[0].toBigInt();
  }

  try_borrowed(): CallResult<BigInt> {
    let result = super.tryCall("borrowed", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  chargeInterest(
    interestBearingAmount: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt
  ): BigInt {
    let result = super.call("chargeInterest", [
      EthereumValue.fromUnsignedBigInt(interestBearingAmount),
      EthereumValue.fromUnsignedBigInt(ratePerSecond),
      EthereumValue.fromUnsignedBigInt(lastUpdated)
    ]);

    return result[0].toBigInt();
  }

  try_chargeInterest(
    interestBearingAmount: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("chargeInterest", [
      EthereumValue.fromUnsignedBigInt(interestBearingAmount),
      EthereumValue.fromUnsignedBigInt(ratePerSecond),
      EthereumValue.fromUnsignedBigInt(lastUpdated)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  compounding(
    chi: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt,
    pie: BigInt
  ): SeniorTranche__compoundingResult {
    let result = super.call("compounding", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(ratePerSecond),
      EthereumValue.fromUnsignedBigInt(lastUpdated),
      EthereumValue.fromUnsignedBigInt(pie)
    ]);

    return new SeniorTranche__compoundingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_compounding(
    chi: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt,
    pie: BigInt
  ): CallResult<SeniorTranche__compoundingResult> {
    let result = super.tryCall("compounding", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(ratePerSecond),
      EthereumValue.fromUnsignedBigInt(lastUpdated),
      EthereumValue.fromUnsignedBigInt(pie)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new SeniorTranche__compoundingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  currency(): Address {
    let result = super.call("currency", []);

    return result[0].toAddress();
  }

  try_currency(): CallResult<Address> {
    let result = super.tryCall("currency", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  debt(): BigInt {
    let result = super.call("debt", []);

    return result[0].toBigInt();
  }

  try_debt(): CallResult<BigInt> {
    let result = super.tryCall("debt", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  interest(): BigInt {
    let result = super.call("interest", []);

    return result[0].toBigInt();
  }

  try_interest(): CallResult<BigInt> {
    let result = super.tryCall("interest", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdated(): BigInt {
    let result = super.call("lastUpdated", []);

    return result[0].toBigInt();
  }

  try_lastUpdated(): CallResult<BigInt> {
    let result = super.tryCall("lastUpdated", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  ratePerSecond(): BigInt {
    let result = super.call("ratePerSecond", []);

    return result[0].toBigInt();
  }

  try_ratePerSecond(): CallResult<BigInt> {
    let result = super.tryCall("ratePerSecond", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rdiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rdiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_rdiv(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rdiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rmul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rmul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_rmul(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rmul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rpow(x: BigInt, n: BigInt, base: BigInt): BigInt {
    let result = super.call("rpow", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(n),
      EthereumValue.fromUnsignedBigInt(base)
    ]);

    return result[0].toBigInt();
  }

  try_rpow(x: BigInt, n: BigInt, base: BigInt): CallResult<BigInt> {
    let result = super.tryCall("rpow", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(n),
      EthereumValue.fromUnsignedBigInt(base)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeAdd(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeAdd", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeAdd(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeAdd", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeDiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeDiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeDiv(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeDiv", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeMul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeMul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeMul(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeMul", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  safeSub(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeSub", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);

    return result[0].toBigInt();
  }

  try_safeSub(x: BigInt, y: BigInt): CallResult<BigInt> {
    let result = super.tryCall("safeSub", [
      EthereumValue.fromUnsignedBigInt(x),
      EthereumValue.fromUnsignedBigInt(y)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  self(): Address {
    let result = super.call("self", []);

    return result[0].toAddress();
  }

  try_self(): CallResult<Address> {
    let result = super.tryCall("self", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  toAmount(chi: BigInt, pie: BigInt): BigInt {
    let result = super.call("toAmount", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(pie)
    ]);

    return result[0].toBigInt();
  }

  try_toAmount(chi: BigInt, pie: BigInt): CallResult<BigInt> {
    let result = super.tryCall("toAmount", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(pie)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  toPie(chi: BigInt, amount: BigInt): BigInt {
    let result = super.call("toPie", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_toPie(chi: BigInt, amount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("toPie", [
      EthereumValue.fromUnsignedBigInt(chi),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  tokenSupply(): BigInt {
    let result = super.call("tokenSupply", []);

    return result[0].toBigInt();
  }

  try_tokenSupply(): CallResult<BigInt> {
    let result = super.tryCall("tokenSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  updatedDebt(): BigInt {
    let result = super.call("updatedDebt", []);

    return result[0].toBigInt();
  }

  try_updatedDebt(): CallResult<BigInt> {
    let result = super.tryCall("updatedDebt", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("wards", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currency_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assessor_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BorrowCall extends EthereumCall {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class DenyCall extends EthereumCall {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DependCall extends EthereumCall {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class DripCall extends EthereumCall {
  get inputs(): DripCall__Inputs {
    return new DripCall__Inputs(this);
  }

  get outputs(): DripCall__Outputs {
    return new DripCall__Outputs(this);
  }
}

export class DripCall__Inputs {
  _call: DripCall;

  constructor(call: DripCall) {
    this._call = call;
  }
}

export class DripCall__Outputs {
  _call: DripCall;

  constructor(call: DripCall) {
    this._call = call;
  }
}

export class FileCall extends EthereumCall {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ratePerSecond_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class RedeemCall extends EthereumCall {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RelyCall extends EthereumCall {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RepayCall extends EthereumCall {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class SupplyCall extends EthereumCall {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }
}

export class UpdatedDebtCall extends EthereumCall {
  get inputs(): UpdatedDebtCall__Inputs {
    return new UpdatedDebtCall__Inputs(this);
  }

  get outputs(): UpdatedDebtCall__Outputs {
    return new UpdatedDebtCall__Outputs(this);
  }
}

export class UpdatedDebtCall__Inputs {
  _call: UpdatedDebtCall;

  constructor(call: UpdatedDebtCall) {
    this._call = call;
  }
}

export class UpdatedDebtCall__Outputs {
  _call: UpdatedDebtCall;

  constructor(call: UpdatedDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
